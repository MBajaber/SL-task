{"version":3,"sources":["Components/AccordionTable/AccordionTableRow/AccordionTableRow.js","Components/AccordionTable/AccordionTable.js","Components/AccordionTable/AccordionTableSm/AccordionTableRowSm/AccordionTableRowSm.js","Components/AccordionTable/AccordionTableSm/AccordionTableSm.js","Components/AccordionTable/AccordionTableSm/AllAccordionTableSm.js","Containers/History/History.js"],"names":["useStyles","makeStyles","theme","paper","padding","secondaryTail","backgroundColor","palette","secondary","main","Row","index","user","startTime","updateDate","useState","open","setOpen","myContext","useContext","MyContext","classes","workProcessState","data","workProcess","TableRow","TableCell","IconButton","aria-label","size","onClick","color","align","style","direction","dateTime","getDate","arabicMonths","getMonth","getFullYear","formatAMPM","username","toLowerCase","address","street","split","zipcode","paddingBottom","paddingTop","className","colSpan","Collapse","in","timeout","unmountOnExit","Timeline","TimelineItem","TimelineSeparator","TimelineDot","TimelineConnector","TimelineContent","Paper","elevation","Typography","variant","component","englishMonths","slice","AccordionTable","dataUsers","TableContainer","Table","TableHead","TableBody","startTimeContext","endTimeContext","undefined","length","StartDates","map","date","Date","endDates","filter","e","openValue","setOpenValue","useEffect","Object","keys","AccordionTableSm","AllAccordionTableSm","History","setWorkProcess","setStartTime","endTime","setEndTime","checked","setChecked","setDataUsers","isLoader","setIsLoader","left","drawer","setDrawer","mount","fetch","then","response","json","responseJson","catch","error","alert","toggleDrawer","event","type","key","resultsHandler","setWorkProcessState","setStartTimeContext","setEndTimeContext","resetHandler","list","anchor","role","List","onKeyDown","FormControl","NativeSelect","value","onChange","target","name","inputProps","Set","FormControlLabel","control","Checkbox","label","Button","Drawer","onClose","minHeight","Loader","smallSize"],"mappings":"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","file":"static/js/5.8a1b4e6d.chunk.js","sourcesContent":["import React, { useState, Fragment, useContext } from 'react';\r\nimport { BsFillArrowUpCircleFill, BsArrowDownCircle ,BsCheckCircle } from 'react-icons/bs';\r\n                                    \r\nimport TableCell from '@material-ui/core/TableCell';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport TableRow from '@material-ui/core/TableRow';\r\nimport Collapse from '@material-ui/core/Collapse';\r\nimport './AccordionTableRow.scss';\r\n\r\nimport Timeline from '@material-ui/lab/Timeline';\r\nimport TimelineItem from '@material-ui/lab/TimelineItem';\r\nimport TimelineSeparator from '@material-ui/lab/TimelineSeparator';\r\nimport TimelineConnector from '@material-ui/lab/TimelineConnector';\r\nimport TimelineContent from '@material-ui/lab/TimelineContent';\r\nimport TimelineDot from '@material-ui/lab/TimelineDot';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport data from '../../../data.json';\r\nimport { MyContext } from '../../../context';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  paper: {\r\n    padding: '6px 16px',\r\n  },\r\n  secondaryTail: {\r\n    backgroundColor: theme.palette.secondary.main,\r\n  },\r\n}));\r\n\r\n\r\nfunction Row({ index, user, startTime, updateDate }) {\r\n  const [open, setOpen] = useState(index === 0);\r\n  const myContext = useContext(MyContext);\r\n  const classes = useStyles();\r\n  // myContext.workProcessState\r\n  return (\r\n    <Fragment>\r\n      {\r\n        myContext.workProcessState === '' ? (\r\n          <Fragment>\r\n            <TableRow>\r\n        <TableCell>\r\n          <IconButton aria-label=\"expand row\" size=\"small\" onClick={() => setOpen(!open)}>\r\n            {open ? <BsFillArrowUpCircleFill color='#5CD5C4' size={24} /> : <BsArrowDownCircle color='#5CD5C4' size={24} />}\r\n          </IconButton>\r\n        </TableCell>\r\n        <TableCell align=\"right\"><BsCheckCircle size={22} color='#5CD5C4' /></TableCell>\r\n        <TableCell align=\"right\">\r\n          <bdi style={{direction: 'rtl'}}>\r\n            <time dateTime={updateDate}>{`${updateDate.getDate()} ${myContext.arabicMonths[updateDate.getMonth()]} ${updateDate.getFullYear()} , ${myContext.formatAMPM(updateDate)}`}</time>\r\n          </bdi>\r\n        </TableCell>\r\n        <TableCell align=\"right\">\r\n          <bdi style={{direction: 'rtl'}}>\r\n            <time dateTime={startTime}>{`${startTime.getDate()} ${myContext.arabicMonths[startTime.getMonth()]} ${startTime.getFullYear()} , ${myContext.formatAMPM(startTime)}`}</time>\r\n          </bdi>\r\n        </TableCell>\r\n        <TableCell align=\"right\">{user.username.toLowerCase()}</TableCell>\r\n        <TableCell align=\"right\">{`id-${user.address.street.split(' ')[0].toLowerCase()}${user.address.zipcode.split('-')[0]}`}</TableCell>\r\n        <TableCell align=\"right\">{data.workProcess[index]}</TableCell>\r\n      </TableRow>\r\n      <TableRow>\r\n        <TableCell style={{ paddingBottom: 0, paddingTop: 0 }} className='table_body' colSpan={7}>\r\n          <Collapse in={open} timeout=\"auto\" unmountOnExit>\r\n              <div className='table_body_in'>\r\n                <div className='table_body_code'>\r\n                  <h4 className='table_body_title'>تشغيل سيرة العمل</h4>\r\n                  <div className='code_box'>\r\n                    <pre className='code'>\r\n<span>{`#version 430 core`}</span>\r\n{`\r\nlayout(local_size_x = 1, local_size_y = 1, local_size_z = 1) in;\r\nstruct Vert \r\n{\r\n  vec4 position;\r\n  vec4 normal;\r\n  vec2 texCoord;\r\n};\r\nlayout (std430, binding = 0)  buffer gOutput\r\n{\r\n  Vert verts[];\r\n};\r\nvoid main(void){\r\n  //uint meshX =  gl_WorkGroupID.x * gl_WorkGroupSize.x + \r\n`}\r\n                    </pre>\r\n                  </div>\r\n                </div>\r\n                <div className='table_body_summery'>\r\n                  <h4 className='table_body_title'>الملخص</h4>\r\n                  <Timeline align=\"right\">\r\n                    <TimelineItem>\r\n                      <TimelineSeparator>\r\n                        <TimelineDot />\r\n                        <TimelineConnector />\r\n                      </TimelineSeparator>\r\n                      <TimelineContent>\r\n                        <Paper elevation={3} className={classes.paper}>\r\n                          <Typography variant=\"h6\" component=\"span\">\r\n                            <time dateTime={startTime}>{`${myContext.englishMonths[startTime.getMonth()].slice(0, 3)} ${startTime.getDate()}, ${myContext.formatAMPM(startTime).split(' ')[0]} ${myContext.formatAMPM(startTime).split(' ')[1] === 'ص' ? 'am' : `pm`}`}</time>\r\n                          </Typography>\r\n                          <Typography>تم إدخال سير العمل من المعاملة</Typography>\r\n                        </Paper>\r\n                      </TimelineContent>\r\n                    </TimelineItem>\r\n                    <TimelineItem>\r\n                      <TimelineSeparator>\r\n                        <TimelineDot />\r\n                        <TimelineConnector />\r\n                      </TimelineSeparator>\r\n                      <TimelineContent>\r\n                        <Paper elevation={3} className={classes.paper}>\r\n                          <Typography variant=\"h6\" component=\"span\">\r\n                            <time dateTime={startTime}>{`${myContext.englishMonths[startTime.getMonth()].slice(0, 3)} ${startTime.getDate()}, ${myContext.formatAMPM(startTime).split(' ')[0]} ${myContext.formatAMPM(startTime).split(' ')[1] === 'ص' ? 'am' : `pm`}`}</time>\r\n                          </Typography>\r\n                          <Typography>تطابق كل شئ إخر الطريق</Typography>\r\n                        </Paper>\r\n                      </TimelineContent>\r\n                    </TimelineItem>\r\n                    <TimelineItem>\r\n                      <TimelineSeparator>\r\n                        <TimelineDot />\r\n                        <TimelineConnector />\r\n                      </TimelineSeparator>\r\n                      <TimelineContent>\r\n                        <Paper elevation={3} className={classes.paper}>\r\n                          <Typography variant=\"h6\" component=\"span\">\r\n                            <time dateTime={updateDate}>{`${myContext.englishMonths[updateDate.getMonth()].slice(0, 3)} ${updateDate.getDate()}, ${myContext.formatAMPM(updateDate).split(' ')[0]} ${myContext.formatAMPM(updateDate).split(' ')[1] === 'ص' ? 'am' : `pm`}`}</time>\r\n                          </Typography>\r\n                          <Typography>تم إنتهاء دون أخذ إجراء</Typography>\r\n                        </Paper>\r\n                      </TimelineContent>\r\n                    </TimelineItem>\r\n                  </Timeline>\r\n                </div>\r\n              </div>\r\n          </Collapse>\r\n        </TableCell>\r\n      </TableRow>\r\n          </Fragment>\r\n\r\n        ) : myContext.workProcessState === data.workProcess[index] && (\r\n          <Fragment>\r\n            <TableRow>\r\n        <TableCell>\r\n          <IconButton aria-label=\"expand row\" size=\"small\" onClick={() => setOpen(!open)}>\r\n            {open ? <BsFillArrowUpCircleFill color='#5CD5C4' size={24} /> : <BsArrowDownCircle color='#5CD5C4' size={24} />}\r\n          </IconButton>\r\n        </TableCell>\r\n        <TableCell align=\"right\"><BsCheckCircle size={22} color='#5CD5C4' /></TableCell>\r\n        <TableCell align=\"right\">\r\n          <bdi style={{direction: 'rtl'}}>\r\n            <time dateTime={updateDate}>{`${updateDate.getDate()} ${myContext.arabicMonths[updateDate.getMonth()]} ${updateDate.getFullYear()} , ${myContext.formatAMPM(updateDate)}`}</time>\r\n          </bdi>\r\n        </TableCell>\r\n        <TableCell align=\"right\">\r\n          <bdi style={{direction: 'rtl'}}>\r\n            <time dateTime={startTime}>{`${startTime.getDate()} ${myContext.arabicMonths[startTime.getMonth()]} ${startTime.getFullYear()} , ${myContext.formatAMPM(startTime)}`}</time>\r\n          </bdi>\r\n        </TableCell>\r\n        <TableCell align=\"right\">{user.username.toLowerCase()}</TableCell>\r\n        <TableCell align=\"right\">{`id-${user.address.street.split(' ')[0].toLowerCase()}${user.address.zipcode.split('-')[0]}`}</TableCell>\r\n        <TableCell align=\"right\">{data.workProcess[index]}</TableCell>\r\n      </TableRow>\r\n      <TableRow>\r\n        <TableCell style={{ paddingBottom: 0, paddingTop: 0 }} className='table_body' colSpan={7}>\r\n          <Collapse in={open} timeout=\"auto\" unmountOnExit>\r\n              <div className='table_body_in'>\r\n                <div className='table_body_code'>\r\n                  <h4 className='table_body_title'>تشغيل سيرة العمل</h4>\r\n                  <div className='code_box'>\r\n                    <pre className='code'>\r\n<span>{`#version 430 core`}</span>\r\n{`\r\nlayout(local_size_x = 1, local_size_y = 1, local_size_z = 1) in;\r\nstruct Vert \r\n{\r\n  vec4 position;\r\n  vec4 normal;\r\n  vec2 texCoord;\r\n};\r\nlayout (std430, binding = 0)  buffer gOutput\r\n{\r\n  Vert verts[];\r\n};\r\nvoid main(void){\r\n  //uint meshX =  gl_WorkGroupID.x * gl_WorkGroupSize.x + \r\n`}\r\n                    </pre>\r\n                  </div>\r\n                </div>\r\n                <div className='table_body_summery'>\r\n                  <h4 className='table_body_title'>الملخص</h4>\r\n                  <Timeline align=\"right\">\r\n                    <TimelineItem>\r\n                      <TimelineSeparator>\r\n                        <TimelineDot />\r\n                        <TimelineConnector />\r\n                      </TimelineSeparator>\r\n                      <TimelineContent>\r\n                        <Paper elevation={3} className={classes.paper}>\r\n                          <Typography variant=\"h6\" component=\"span\">\r\n                            <time dateTime={startTime}>{`${myContext.englishMonths[startTime.getMonth()].slice(0, 3)} ${startTime.getDate()}, ${myContext.formatAMPM(startTime).split(' ')[0]} ${myContext.formatAMPM(startTime).split(' ')[1] === 'ص' ? 'am' : `pm`}`}</time>\r\n                          </Typography>\r\n                          <Typography>تم إدخال سير العمل من المعاملة</Typography>\r\n                        </Paper>\r\n                      </TimelineContent>\r\n                    </TimelineItem>\r\n                    <TimelineItem>\r\n                      <TimelineSeparator>\r\n                        <TimelineDot />\r\n                        <TimelineConnector />\r\n                      </TimelineSeparator>\r\n                      <TimelineContent>\r\n                        <Paper elevation={3} className={classes.paper}>\r\n                          <Typography variant=\"h6\" component=\"span\">\r\n                            <time dateTime={startTime}>{`${myContext.englishMonths[startTime.getMonth()].slice(0, 3)} ${startTime.getDate()}, ${myContext.formatAMPM(startTime).split(' ')[0]} ${myContext.formatAMPM(startTime).split(' ')[1] === 'ص' ? 'am' : `pm`}`}</time>\r\n                          </Typography>\r\n                          <Typography>تطابق كل شئ إخر الطريق</Typography>\r\n                        </Paper>\r\n                      </TimelineContent>\r\n                    </TimelineItem>\r\n                    <TimelineItem>\r\n                      <TimelineSeparator>\r\n                        <TimelineDot />\r\n                        <TimelineConnector />\r\n                      </TimelineSeparator>\r\n                      <TimelineContent>\r\n                        <Paper elevation={3} className={classes.paper}>\r\n                          <Typography variant=\"h6\" component=\"span\">\r\n                            <time dateTime={updateDate}>{`${myContext.englishMonths[updateDate.getMonth()].slice(0, 3)} ${updateDate.getDate()}, ${myContext.formatAMPM(updateDate).split(' ')[0]} ${myContext.formatAMPM(updateDate).split(' ')[1] === 'ص' ? 'am' : `pm`}`}</time>\r\n                          </Typography>\r\n                          <Typography>تم إنتهاء دون أخذ إجراء</Typography>\r\n                        </Paper>\r\n                      </TimelineContent>\r\n                    </TimelineItem>\r\n                  </Timeline>\r\n                </div>\r\n              </div>\r\n          </Collapse>\r\n        </TableCell>\r\n      </TableRow>\r\n          </Fragment>\r\n        )\r\n      }\r\n    </Fragment>\r\n  )\r\n}   \r\n\r\nexport default Row;\r\n","import React,{ useContext } from 'react';\r\nimport './AccordionTable.scss';\r\nimport Row from './AccordionTableRow/AccordionTableRow';\r\nimport TableContainer from '@material-ui/core/TableContainer';\r\nimport Table from '@material-ui/core/Table';\r\nimport TableHead from '@material-ui/core/TableHead';\r\nimport TableCell from '@material-ui/core/TableCell';\r\nimport TableRow from '@material-ui/core/TableRow';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport TableBody from '@material-ui/core/TableBody';\r\nimport data from '../../data.json';\r\nimport { MyContext } from '../../context';\r\n\r\nfunction AccordionTable({ dataUsers }) {\r\n    const myContext = useContext(MyContext);\r\n\r\n    function showAccor() {\r\n        if(myContext.startTimeContext === '' && myContext.endTimeContext === '') {\r\n            return dataUsers.length !== undefined && dataUsers.length > 0 && data.StartDates.map((date, index) => (\r\n                <Row key={index} index={index} user={dataUsers[index]} startTime={new Date(date)} updateDate={new Date(data.endDates[index])} />\r\n            ))\r\n\r\n        } else if(myContext.startTimeContext !== '' && myContext.endTimeContext !== '') {\r\n            return (\r\n                <>\r\n                    {data.StartDates.filter(e => new Date(myContext.startTimeContext) <= new Date(e)).map((date,index) => <Row key={index} index={index} user={dataUsers[index]} startTime={new Date(date)} updateDate={new Date(data.endDates[index])} />)}\r\n                    {data.endDates.filter(e => new Date(myContext.endTimeContext) >= new Date(e)).map((date,index) => <Row key={index} index={index} user={dataUsers[index]} startTime={new Date(date)} updateDate={new Date(data.endDates[index])} />)}\r\n                </>\r\n            )\r\n        } else if(myContext.startTimeContext !== '' && myContext.endTimeContext === '') {\r\n            return (\r\n                <>\r\n                    {data.StartDates.filter(e => new Date(myContext.startTimeContext) <= new Date(e)).map((date,index) => <Row key={index} index={index} user={dataUsers[index]} startTime={new Date(date)} updateDate={new Date(data.endDates[index])} />)}\r\n                    {data.endDates.filter(e => new Date(myContext.endTimeContext) >= new Date(e)).map((date,index) => <Row key={index} index={index} user={dataUsers[index]} startTime={new Date(date)} updateDate={new Date(data.endDates[index])} />)}\r\n                </>\r\n            )\r\n            \r\n        } else if(myContext.startTimeContext === '' && myContext.endTimeContext !== '') {\r\n            return (\r\n                <>\r\n                    {data.StartDates.filter(e => new Date(myContext.startTimeContext) <= new Date(e)).map((date,index) => <Row key={index} index={index} user={dataUsers[index]} startTime={new Date(date)} updateDate={new Date(data.endDates[index])} />)}\r\n                    {data.endDates.filter(e => new Date(myContext.endTimeContext) >= new Date(e)).map((date,index) => <Row key={index} index={index} user={dataUsers[index]} startTime={new Date(date)} updateDate={new Date(data.endDates[index])} />)}\r\n                </>\r\n            )\r\n        } else {\r\n            return dataUsers.length !== undefined && dataUsers.length > 0 && data.StartDates.map((date, index) => (\r\n                <Row key={index} index={index} user={dataUsers[index]} startTime={new Date(date)} updateDate={new Date(data.endDates[index])} />\r\n            ))\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className='history_accordion'>\r\n            <TableContainer component={Paper}>\r\n                <Table aria-label=\"collapsible table\">\r\n                    <TableHead>\r\n                        <TableRow>\r\n                            <TableCell align=\"right\" /> \r\n                            <TableCell align=\"right\">الحالة</TableCell>\r\n                            <TableCell align=\"right\">أخر تحديث</TableCell>\r\n                            <TableCell align=\"right\">بداية الوقت</TableCell>\r\n                            <TableCell align=\"right\">إجراء</TableCell>\r\n                            <TableCell align=\"right\">كيان</TableCell>\r\n                            <TableCell align=\"right\">سير العمل</TableCell>\r\n                        </TableRow>\r\n                    </TableHead>\r\n                    <TableBody>\r\n                    {showAccor()}\r\n                    </TableBody>\r\n                </Table>\r\n            </TableContainer>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default AccordionTable\r\n","import React, { useState, Fragment, useEffect, useContext } from 'react';\r\nimport { BsCheckCircle } from 'react-icons/bs';\r\nimport TableCell from '@material-ui/core/TableCell';\r\nimport TableRow from '@material-ui/core/TableRow';\r\nimport Collapse from '@material-ui/core/Collapse';\r\nimport './AccordionTableRowSm.scss';\r\nimport Timeline from '@material-ui/lab/Timeline';\r\nimport TimelineItem from '@material-ui/lab/TimelineItem';\r\nimport TimelineSeparator from '@material-ui/lab/TimelineSeparator';\r\nimport TimelineConnector from '@material-ui/lab/TimelineConnector';\r\nimport TimelineContent from '@material-ui/lab/TimelineContent';\r\nimport TimelineDot from '@material-ui/lab/TimelineDot';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport { MyContext } from '../../../../context';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  paper: {\r\n    padding: '6px 16px',\r\n  },\r\n  secondaryTail: {\r\n    backgroundColor: theme.palette.secondary.main,\r\n  },\r\n}));\r\n\r\nfunction Row({ user, startTime, updateDate, open }) {\r\n  const [openValue, setOpenValue] = useState(open);\r\n  const myContext = useContext(MyContext);\r\n  const classes = useStyles();\r\n\r\n  useEffect(() => setOpenValue(open), [open]);\r\n\r\n  return user !== undefined && Object.keys(user).length > 0 ? (\r\n    <Fragment>\r\n      <TableRow>\r\n        <TableCell style={{ paddingBottom: 0, paddingTop: 0 }} className='table_body' colSpan={1}>\r\n          <Collapse in={openValue} timeout=\"auto\" unmountOnExit>\r\n              <div className='table_body_in_sm'>\r\n                <ul className='show_list'>\r\n                  <li>\r\n                    <span className='text'>{`id-${user.address.street.split(' ')[0].toLowerCase()}${user.address.zipcode.split('-')[0]}`}</span>\r\n                    <span className='show_list_title'>كيان</span>\r\n                  </li>\r\n                  <li>\r\n                    <span className='text'>{user.username.toLowerCase()}</span>\r\n                    <span className='show_list_title'>إجراء</span>\r\n                  </li>\r\n                  <li>\r\n                    <span className='text'>\r\n                    <bdi style={{direction: 'rtl'}}>\r\n                      <time dateTime={startTime}>{`${startTime.getDate()} ${myContext.arabicMonths[startTime.getMonth()]} ${startTime.getFullYear()} , ${myContext.formatAMPM(startTime)}`}</time>\r\n                    </bdi>\r\n                    </span>\r\n                    <span className='show_list_title'>بداية الوقت</span>\r\n                  </li>\r\n                  <li>\r\n                    <span className='text'>\r\n                    <bdi style={{direction: 'rtl'}}>\r\n                      <time dateTime={updateDate}>{`${updateDate.getDate()} ${myContext.arabicMonths[updateDate.getMonth()]} ${updateDate.getFullYear()} , ${myContext.formatAMPM(updateDate)}`}</time>\r\n                    </bdi>\r\n                    </span>\r\n                    <span className='show_list_title'>أخر تحديث</span>\r\n                  </li>\r\n                  <li>\r\n                    <span className='text'><BsCheckCircle size={22} color='#5CD5C4' /></span>\r\n                    <span className='show_list_title'>الحالة</span>\r\n                  </li>\r\n                </ul>\r\n\r\n                <div className='table_body_summery'>\r\n                  <h4 className='table_body_title'>الملخص</h4>\r\n                  <Timeline align=\"right\">\r\n                    <TimelineItem>\r\n                      <TimelineSeparator>\r\n                        <TimelineDot />\r\n                        <TimelineConnector />\r\n                      </TimelineSeparator>\r\n                      <TimelineContent>\r\n                        <Paper elevation={3} className={classes.paper}>\r\n                          <Typography variant=\"h6\" component=\"span\">\r\n                            <time dateTime={startTime}>{`${myContext.englishMonths[startTime.getMonth()].slice(0, 3)} ${startTime.getDate()}, ${myContext.formatAMPM(startTime).split(' ')[0]} ${myContext.formatAMPM(startTime).split(' ')[1] === 'ص' ? 'am' : `pm`}`}</time>\r\n                          </Typography>\r\n                          <Typography>تم إدخال سير العمل من المعاملة</Typography>\r\n                        </Paper>\r\n                      </TimelineContent>\r\n                    </TimelineItem>\r\n                    <TimelineItem>\r\n                      <TimelineSeparator>\r\n                        <TimelineDot />\r\n                        <TimelineConnector />\r\n                      </TimelineSeparator>\r\n                      <TimelineContent>\r\n                        <Paper elevation={3} className={classes.paper}>\r\n                          <Typography variant=\"h6\" component=\"span\">\r\n                            <time dateTime={startTime}>{`${myContext.englishMonths[startTime.getMonth()].slice(0, 3)} ${startTime.getDate()}, ${myContext.formatAMPM(startTime).split(' ')[0]} ${myContext.formatAMPM(startTime).split(' ')[1] === 'ص' ? 'am' : `pm`}`}</time>\r\n                          </Typography>\r\n                          <Typography>تطابق كل شئ إخر الطريق</Typography>\r\n                        </Paper>\r\n                      </TimelineContent>\r\n                    </TimelineItem>\r\n                    <TimelineItem>\r\n                      <TimelineSeparator>\r\n                        <TimelineDot />\r\n                        <TimelineConnector />\r\n                      </TimelineSeparator>\r\n                      <TimelineContent>\r\n                        <Paper elevation={3} className={classes.paper}>\r\n                          <Typography variant=\"h6\" component=\"span\">\r\n                            <time dateTime={updateDate}>{`${myContext.englishMonths[updateDate.getMonth()].slice(0, 3)} ${updateDate.getDate()}, ${myContext.formatAMPM(updateDate).split(' ')[0]} ${myContext.formatAMPM(updateDate).split(' ')[1] === 'ص' ? 'am' : `pm`}`}</time>\r\n                          </Typography>\r\n                          <Typography>تم إنتهاء دون أخذ إجراء</Typography>\r\n                        </Paper>\r\n                      </TimelineContent>\r\n                    </TimelineItem>\r\n                  </Timeline>\r\n                </div>\r\n                <div className='table_body_code'>\r\n                  <h4 className='table_body_title'>تشغيل سيرة العمل</h4>\r\n                  <div className='code_box'>\r\n                    <pre className='code'>\r\n<span>{`#version 430 core`}</span>\r\n{`\r\nlayout(local_size_x = 1, local_size_y = 1,\r\nlocal_size_z = 1) in;\r\nstruct Vert \r\n{\r\n  vec4 position;\r\n  vec4 normal;\r\n  vec2 texCoord;\r\n};\r\nlayout (std430, binding = 0)  buffer gOutput\r\n{\r\n  Vert verts[];\r\n};\r\nvoid main(void){\r\n  //uint meshX =  gl_WorkGroupID.x *\r\n  gl_WorkGroupSize.x + \r\n}`}\r\n                    </pre>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n          </Collapse>\r\n        </TableCell>\r\n      </TableRow>\r\n    </Fragment>\r\n  ) : null;\r\n}   \r\n\r\nexport default Row;\r\n","import React, { useState, useContext } from 'react';\r\nimport './AccordionTableSm.scss';\r\nimport RowSM from './AccordionTableRowSm/AccordionTableRowSm';\r\nimport { BsFillArrowUpCircleFill, BsArrowDownCircle } from 'react-icons/bs';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport TableContainer from '@material-ui/core/TableContainer';\r\nimport Table from '@material-ui/core/Table';\r\nimport TableHead from '@material-ui/core/TableHead';\r\nimport TableCell from '@material-ui/core/TableCell';\r\nimport TableRow from '@material-ui/core/TableRow';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport TableBody from '@material-ui/core/TableBody';\r\nimport data from '../../../data.json';\r\nimport { MyContext } from '../../../context';\r\n\r\nfunction AccordionTableSm({ index, user, startTime, updateDate }) {\r\n    const myContext = useContext(MyContext);\r\n    const [open, setOpen] = useState(index === 0);\r\n    return (\r\n        <div className='history_accordion_sm'>\r\n        {\r\n            myContext.workProcessState === '' ? (\r\n                <TableContainer component={Paper}>\r\n                    <Table aria-label=\"collapsible table\">\r\n                        <TableHead>\r\n                            <TableRow className='second_cell'>\r\n                               <TableCell align=\"right\" className='taple_title with_icon'>\r\n                                    <h4>{data.workProcess[index]}</h4>\r\n                                    <IconButton aria-label=\"expand row\" size=\"small\" onClick={() => setOpen(!open)}>\r\n                                        {open ? <BsFillArrowUpCircleFill color='#5CD5C4' size={24} /> : <BsArrowDownCircle color='#5CD5C4' size={24} />}\r\n                                    </IconButton>\r\n                                </TableCell>\r\n                                <TableCell align=\"right\" className='taple_title'>سير العمل</TableCell>\r\n                            </TableRow>\r\n                        </TableHead>\r\n                        <TableBody>\r\n                        <RowSM index={index} user={user} startTime={startTime} updateDate={updateDate} open={open} />\r\n                        </TableBody>\r\n                    </Table>\r\n                </TableContainer>\r\n            ) : myContext.workProcessState === data.workProcess[index] && (\r\n                <TableContainer component={Paper}>\r\n                    <Table aria-label=\"collapsible table\">\r\n                        <TableHead>\r\n                            <TableRow className='second_cell'>\r\n                                <TableCell align=\"right\" className='taple_title with_icon'>\r\n                                    <h4>{data.workProcess[index]}</h4>\r\n                                    <IconButton aria-label=\"expand row\" size=\"small\" onClick={() => setOpen(!open)}>\r\n                                        {open ? <BsFillArrowUpCircleFill color='#5CD5C4' size={24} /> : <BsArrowDownCircle color='#5CD5C4' size={24} />}\r\n                                    </IconButton>\r\n                                </TableCell>\r\n                                <TableCell align=\"right\" className='taple_title'>سير العمل</TableCell>\r\n                            </TableRow>\r\n                    </TableHead>\r\n                    <TableBody>\r\n                        <RowSM index={index} user={user} startTime={startTime} updateDate={updateDate} open={open} />\r\n                    </TableBody>\r\n                    </Table>\r\n                </TableContainer>\r\n            )\r\n        }\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default AccordionTableSm;","import React, { useContext } from 'react';\r\nimport AccordionTableSm from './AccordionTableSm';\r\nimport data from '../../../data.json';\r\nimport { MyContext } from '../../../context';\r\n\r\nfunction AllAccordionTableSm({ dataUsers, workProcess }) {\r\n    const myContext = useContext(MyContext);\r\n    \r\n    function showAccor() {\r\n        if(myContext.startTimeContext === '' && myContext.endTimeContext === '') {\r\n            return dataUsers.length !== undefined && dataUsers.length > 0 && data.StartDates.map((date, index) => (\r\n                <AccordionTableSm key={index} index={index} user={dataUsers[index]} startTime={new Date(date)} updateDate={new Date(data.endDates[index])} />\r\n            ))\r\n\r\n        } else if(myContext.startTimeContext !== '' && myContext.endTimeContext !== '') {\r\n            return (\r\n                <>\r\n                    {data.StartDates.filter(e => new Date(myContext.startTimeContext) <= new Date(e)).map((date,index) => <AccordionTableSm key={index} index={index} user={dataUsers[index]} startTime={new Date(date)} updateDate={new Date(data.endDates[index])} />)}\r\n                    {data.endDates.filter(e => new Date(myContext.endTimeContext) >= new Date(e)).map((date,index) => <AccordionTableSm key={index} index={index} user={dataUsers[index]} startTime={new Date(date)} updateDate={new Date(data.endDates[index])} />)}\r\n                </>\r\n            )\r\n        } else if(myContext.startTimeContext !== '' && myContext.endTimeContext === '') {\r\n            return (\r\n                <>\r\n                    {data.StartDates.filter(e => new Date(myContext.startTimeContext) <= new Date(e)).map((date,index) => <AccordionTableSm key={index} index={index} user={dataUsers[index]} startTime={new Date(date)} updateDate={new Date(data.endDates[index])} />)}\r\n                    {data.endDates.filter(e => new Date(myContext.endTimeContext) >= new Date(e)).map((date,index) => <AccordionTableSm key={index} index={index} user={dataUsers[index]} startTime={new Date(date)} updateDate={new Date(data.endDates[index])} />)}\r\n                </>\r\n            )\r\n            \r\n        } else if(myContext.startTimeContext === '' && myContext.endTimeContext !== '') {\r\n            return (\r\n                <>\r\n                    {data.StartDates.filter(e => new Date(myContext.startTimeContext) <= new Date(e)).map((date,index) => <AccordionTableSm key={index} index={index} user={dataUsers[index]} startTime={new Date(date)} updateDate={new Date(data.endDates[index])} />)}\r\n                    {data.endDates.filter(e => new Date(myContext.endTimeContext) >= new Date(e)).map((date,index) => <AccordionTableSm key={index} index={index} user={dataUsers[index]} startTime={new Date(date)} updateDate={new Date(data.endDates[index])} />)}\r\n                </>\r\n            )\r\n        } else {\r\n            return dataUsers.length !== undefined && dataUsers.length > 0 && data.StartDates.map((date, index) => (\r\n                <AccordionTableSm key={index} index={index} user={dataUsers[index]} startTime={new Date(date)} updateDate={new Date(data.endDates[index])} />\r\n            ))\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className='all_accprdion_table'>\r\n            {showAccor()}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default AllAccordionTableSm\r\n","import React, { useState, useEffect, useContext } from 'react';\r\nimport './History.scss';\r\nimport { CgBox } from 'react-icons/cg';\r\nimport AccordionTable from '../../Components/AccordionTable/AccordionTable';\r\nimport AllAccordionTableSm from '../../Components/AccordionTable/AccordionTableSm/AllAccordionTableSm';\r\nimport { FiFilter } from 'react-icons/fi';\r\nimport { AiOutlineCloseCircle } from 'react-icons/ai';\r\nimport { MdKeyboardArrowDown } from 'react-icons/md';\r\nimport { BsCalendarEvent } from 'react-icons/bs';\r\nimport Drawer from '@material-ui/core/Drawer';\r\nimport Button from '@material-ui/core/Button';\r\nimport List from '@material-ui/core/List';\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport NativeSelect from '@material-ui/core/NativeSelect';\r\nimport Checkbox from '@material-ui/core/Checkbox';\r\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\r\nimport Loader from '../../Components/Loader/Loader';\r\nimport data from '../../data.json';\r\nimport { MyContext } from '../../context';\r\n\r\n\r\n\r\nfunction History() {\r\n  const [workProcess, setWorkProcess] = useState('');\r\n  const [startTime, setStartTime] = useState('');\r\n  const [endTime, setEndTime] = useState('');\r\n  const [checked, setChecked] = useState(true);\r\n  const [dataUsers, setDataUsers] = useState([]);\r\n  const [isLoader, setIsLoader] = useState(false)\r\n  const [drawer, setDrawer] = useState({left: false});\r\n  const myContext = useContext(MyContext);\r\n\r\n\r\n  useEffect(() => {\r\n    let mount = true;\r\n    setIsLoader(true);\r\n    fetch('https://jsonplaceholder.typicode.com/users')\r\n    .then(response => response.json())\r\n    .then(responseJson => {\r\n      if(mount) {\r\n        setIsLoader(false);\r\n        setDataUsers(responseJson)\r\n      }\r\n    })\r\n    .catch(error => {\r\n      setIsLoader(false);\r\n      alert(error)\r\n    });\r\n\r\n    return () => {\r\n      if(mount) {\r\n        mount = false\r\n      }\r\n    }\r\n}, []);\r\n\r\n  const toggleDrawer = (open) => (event) => {\r\n  if (event.type === 'keydown' && (event.key === 'Tab' || event.key === 'Shift')) {\r\n    return;\r\n  }\r\n  setDrawer({ left: open });\r\n};\r\n\r\n  const resultsHandler = () => {\r\n    myContext.setWorkProcessState(workProcess);\r\n    myContext.setStartTimeContext(startTime);\r\n    myContext.setEndTimeContext(endTime);\r\n    setDrawer({ left: false })\r\n  }\r\n\r\n  const resetHandler = () => {\r\n    setWorkProcess('');\r\n    setStartTime('');\r\n    setEndTime('');\r\n    myContext.setWorkProcessState('');\r\n    myContext.setStartTimeContext('');\r\n    myContext.setEndTimeContext('');\r\n    setDrawer({ left: false })\r\n  }\r\n\r\nconst list = (anchor) => (\r\n  <div role=\"presentation\">\r\n    <List>\r\n      <div className='sidebar_title'>\r\n        <div className='title'>\r\n          <h6><FiFilter size={18} color='#444' /> فرز سجل العمليات حسب</h6>\r\n          <AiOutlineCloseCircle color='#f55157' size={24} onClick={toggleDrawer(false)} onKeyDown={toggleDrawer(false)} />\r\n        </div>\r\n      </div>\r\n      <FormControl className='formControl'>\r\n        <NativeSelect value={workProcess} onChange={(event) => setWorkProcess(event.target.value)} name=\"work process\" inputProps={{ 'aria-label': 'work process' }} >\r\n          <option value=''>سير العمل</option>\r\n          {\r\n            [...new Set([...data.workProcess])].map(e => <option key={e} value={e}>{e}</option>)\r\n          }\r\n        </NativeSelect>\r\n        <MdKeyboardArrowDown className='down_arrow' color='#444' />\r\n      </FormControl>\r\n      <FormControl className='formControl start_time'>\r\n        <NativeSelect value={startTime} onChange={(event) => setStartTime(event.target.value)} name=\"start time\" inputProps={{ 'aria-label': 'start time' }} >\r\n          <option value=''>بداية الوقت</option>\r\n          {\r\n            data.StartDates.map(startTime => (\r\n              <option key={startTime} value={startTime}>\r\n                {`${new Date(startTime).getDate()} ${myContext.arabicMonths[new Date(startTime).getMonth()]} ${new Date(startTime).getFullYear()} , ${myContext.formatAMPM(new Date(startTime))}`}\r\n              </option>\r\n            ))\r\n          }\r\n        </NativeSelect>\r\n        <MdKeyboardArrowDown className='down_arrow' color='#444' />\r\n        <BsCalendarEvent className='calendar' color='#444' />\r\n      </FormControl>\r\n      <div className='to'>إلى</div>\r\n      <FormControl className='formControl'>\r\n        <NativeSelect value={endTime} onChange={(event) => setEndTime(event.target.value)} name=\"end time\" inputProps={{ 'aria-label': 'end time' }} >\r\n        <option value=''>نهاية الوقت</option>\r\n        {\r\n            data.endDates.map(endTime => (\r\n              <option key={endTime} value={endTime}>\r\n                {`${new Date(endTime).getDate()} ${myContext.arabicMonths[new Date(endTime).getMonth()]} ${new Date(endTime).getFullYear()} , ${myContext.formatAMPM(new Date(endTime))}`}\r\n              </option>\r\n            ))\r\n          }\r\n        </NativeSelect>\r\n        <MdKeyboardArrowDown className='down_arrow' color='#444' />\r\n        <BsCalendarEvent className='calendar' color='#444' />\r\n      </FormControl>\r\n      <div className='checkbox_btn'>\r\n        <FormControlLabel\r\n          control={\r\n            <Checkbox checked={checked} onChange={(e) => setChecked(e.target.checked)} inputProps={{ 'aria-label': 'primary checkbox' }}/>\r\n          }\r\n          label=\"الإخطاء فقط\"\r\n        />\r\n      </div>\r\n      <div className='btns_box'>\r\n        <Button onClick={resultsHandler} variant=\"contained\" className='results' color=\"primary\">عرض النتائج</Button>\r\n        <Button onClick={resetHandler} variant=\"contained\" className='reset' color=\"primary\">إعادة تعين</Button>\r\n      </div>\r\n    </List>\r\n  </div>\r\n  );\r\n\r\n  return (\r\n    <div className='history'>\r\n      <Drawer left={'left'} open={drawer['left']} onClose={toggleDrawer(false)} className='sidebar'>\r\n        {list('left')}\r\n      </Drawer>\r\n      <div className='filter'>\r\n        <Button onClick={toggleDrawer(true)}>\r\n          <FiFilter color='444' size={20} />\r\n          <span>تصفية</span>\r\n        </Button>\r\n      </div>\r\n      <div className='history_boxes' style={isLoader ? {minHeight: '300px'} : {minHeight: 'auto'}}>\r\n        <h3 className='history_title'><CgBox size={18} /><span>سجل العمليات</span></h3>\r\n        <div className='sidebar'>\r\n          {list('left')}\r\n        </div>\r\n        {isLoader && <Loader smallSize={45} />}\r\n        {\r\n          !isLoader && dataUsers !== undefined && dataUsers.length > 0 && (\r\n            <>\r\n              <AccordionTable dataUsers={dataUsers} workProcess={workProcess} />\r\n              <AllAccordionTableSm dataUsers={dataUsers} workProcess={workProcess} />\r\n            </>\r\n          )\r\n        }\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default History"],"sourceRoot":""}